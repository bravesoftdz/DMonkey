//
// Yacc テンプレート for Delphi
//      by Osamu TAKEUCHI <osamu@big.or.jp>
//         http://www2.big.or.jp/~osamu/
//
//  この Yacc テンプレートを使うと、語彙解析を実装する TYacc というクラスを
//  含むユニットを *.Y ファイルから自動生成することができます。
//
//  TYacc はこのテンプレートとともに配布される YaccLib に実装される TYaccBase
//  クラスの子孫となります。
//
//  YaccLib.TYaccBase の動作をカスタマイズするため TYaccBase から派生したクラスを
//  用意し、TYacc はそれらのクラスから派生させることもできます。
//
//  自動生成されるコードは、これら継承された YaccLib.TYaccBase の子孫クラスも必ず
//  SomeUnit.TYaccBase の形の名前を持つものと仮定します。
//
//  .L の definitions セクションには必ず
//  %{
//      unit UnitName;
//      interface
//      uses LexLib, SomeYaccLib;
//  %}
//  の５行を記述してください。
//  UnitName は *.l ファイルの * 部分と同じ名前
//  SomeYaccLib は TYaccBase クラスを提供するユニット名
//  LexLib はこの COD とともに配布される LexLib ユニット
//  その他必要なユニットをここで uses することができます
//  その他必要なグローバル宣言をここに追加することができます
//
//  .L の rules セクションの先頭で TYacc のメンバー宣言を追加することができます。
//    private
//      procedure SomeUtility;
//  行頭にホワイトスペースを入れなければならないことに注意してください。
//
//  .L の axiliary procedures セクションには rules セクションで追加した宣言に
//  対応する定義を書くことができます。
//      procedure TYacc.SomeUtility;
//      begin
//
//      end;
//
//  出来上がった SomeYacc.pas ユニットは次のようにして使うことができます。
//  ここでは TLexBase として LexLib_Stream.TLexBase を使用したと仮定します。
//
//    uses
//      SomeLex,        // lex  により SomeLex.l  から自動生成される
//      SomeYacc;       // yacc により SomeYacc.y から自動生成される
//
//    var lex: TLex;    // lex  により自動生成された SomeLex  に実装される
//        yacc: TYacc;  // yacc により自動生成された SomeYacc に実装される
//    begin
//        lex := nil;
//        yacc:= nil;
//        try
//            lex := TLex.Create;
//            lex.InputString:= 'x=2*(3+2)'#10'x*3'#10;
//            yacc:= TYacc.Create(lex); // yacc に lex が割り当てられる
//            yacc.yyparse;             // パースを実行！
//        finally
//            yacc.Free;
//            lex.Free;
//        end;
//    end.
//

{$B-}

///////////////////////////////////////////////////////
// .Y に記述されたされた unit/interface/uses
///////////////////////////////////////////////////////

%%

///////////////////////////////////////////////////////

type
  PYYSType = ^YYSType;
  TYYLexFunc = function: Integer of object;

  TYacc = class(TYaccBase)
%%
  public
    function yyparse: Integer;
  end;

implementation

///////////////////////////////////////////////////////

function TYacc.yyparse : Integer;
//yyactionはローカル関数になる
var
  yystate, yysp, yyn : Integer;
  yys : array of Integer;
  yyv : array of YYSType;
  yyval : YYSType;

  procedure yyaction ( yyruleno : Integer );
  begin(*yyaction*)
    (* actions: *)
    case yyruleno of
%%
    end;
  end(*yyaction*);

  (* parse table: *)
%%

const
  _error = 256; (* error token *)

  function yyact(state, sym : Integer; var act : Integer) : Boolean;
    (* search action table *)
  var
    k : Integer;
  begin
    k := yyal[state];
    while (k<=yyah[state]) and (yya[k].sym<>sym) do
      inc(k);

    if k>yyah[state] then
      yyact := false
    else
    begin
      act := yya[k].act;
      yyact := true;
    end;
  end(*yyact*);

  function yygoto(state, sym : Integer; var nstate : Integer) : Boolean;
  (* search goto table *)
  var
    k : Integer;
  begin
    k := yygl[state];
    while (k<=yygh[state]) and (yyg[k].sym<>sym) do
      inc(k);

    if k>yygh[state] then
      yygoto := false
    else
    begin
      nstate := yyg[k].act;
      yygoto := true;
    end;
  end(*yygoto*);

label parse, next, error, errlab, shift, reduce, accept, abort;

begin(*yyparse*)

  (* initialize: *)
  SetLength(yys, yymaxdepth);
  SetLength(yyv, yymaxdepth);
  yystate := 0; yychar := -1; yynerrs := 0; yyerrflag := 0; yysp := 0;
  lex.yyinit;

{$ifdef yydebug}
  yydebug := true;
{$else}
  yydebug := false;
{$endif}

parse:

  (* push state and value: *)

  inc(yysp);
  if yysp>Length(yys)-1 then begin
      SetLength(yys, Length(yys)*2);
      SetLength(yyv, Length(yyv)*2);
  end;
  yys[yysp] := yystate; yyv[yysp] := yyval;

next:

  if (yyd[yystate]=0) and (yychar=-1) then
    (* get next symbol *)
    begin
      yychar := lex.yylex; if yychar<0 then yychar := 0;
    end;

  if yydebug then lex.yywriteln('state '+IntToStr(yystate)+', char '+IntToStr(yychar) );

  (* determine parse action: *)

  yyn := yyd[yystate];
  if yyn<>0 then goto reduce; (* simple state *)

  (* no default action; search parse table *)

  if not yyact(yystate, yychar, yyn) then goto error
  else if yyn>0 then                      goto shift
  else if yyn<0 then                      goto reduce
  else                                    goto accept;

error:

  (* error; start error recovery: *)

  if yyerrflag=0 then yyerror('syntax error');

errlab:

  if yyerrflag=0 then inc(yynerrs);     (* new error *)

  if yyerrflag<=2 then                  (* incomplete recovery; try again *)
    begin
      yyerrflag := 3;
      (* uncover a state with shift action on error token *)
      while (yysp>0) and not ( yyact(yys[yysp], _error, yyn) and
                               (yyn>0) ) do
        begin
          if yydebug then
            if yysp>1 then
              lex.yywriteln('error recovery pops state '+IntToStr(yys[yysp])+', uncovers '
                      +IntToStr(yys[yysp-1]))
            else
              lex.yywriteln('error recovery fails ... abort');
          dec(yysp);
        end;
      if yysp=0 then goto abort; (* parser has fallen from stack; abort *)
      yystate := yyn;            (* simulate shift on error *)
      goto parse;
    end
  else                                  (* no shift yet; discard symbol *)
    begin
      if yydebug then lex.yywriteln('error recovery discards char '+IntToStr(yychar));
      if yychar=0 then goto abort; (* end of input; abort *)
      yychar := -1; goto next;     (* clear lookahead char and try again *)
    end;

shift:

  (* go to new state, clear lookahead character: *)

  yystate := yyn;
  yychar := -1;
  yyval := pyylval^;
  if yyerrflag > 0 then
    dec(yyerrflag);

  goto parse;

reduce:

  (* execute action, pop rule from stack, and go to next state: *)

  if yydebug then lex.yywriteln('reduce '+IntToStr(-yyn));

  yyflag := yyfnone; yyaction(-yyn);
  dec(yysp, yyr[-yyn].len);
  if yygoto(yys[yysp], yyr[-yyn].sym, yyn) then yystate := yyn;

  (* handle action calls to yyaccept, yyabort and yyerror: *)

  case yyflag of
    yyfaccept : goto accept;
    yyfabort  : goto abort;
    yyferror  : goto errlab;
  end;

  goto parse;

accept:

  yyparse := 0;
  lex.yyfinal;
  exit;

abort:

  yyparse := 1;
  lex.yyfinal;
  exit;

end(*yyparse*);
